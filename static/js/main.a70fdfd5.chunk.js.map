{"version":3,"sources":["components/SearchForm.js","utils/API.js","components/ResultList.js","components/SearchResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","htmlFor","id","onChange","handleSelectChange","selected","value","placeholder","type","name","search","handleInputChange","onClick","handleFilterSubmit","axios","get","ResultList","scope","style","color","handleColHeadClick","href","data-col","results","map","result","alt","first","last","src","picture","medium","phone","email","dob","date","slice","SearchResultContainer","state","column","searchEmployee","API","then","res","cleanResult","data","filter","setState","catch","err","console","log","event","target","e","preventDefault","sortCol","col","resultsCopy","sort","a","b","aYr","bYr","aMn","bMn","aDt","bDt","getAttribute","this","handleFormSubmit","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6TA0CeA,MAxCf,SAAoBC,GAChB,OACI,8BACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,YAAf,KACA,yBAAKA,UAAU,YACX,2BAAOA,UAAU,kBAAkBC,QAAQ,0BAA3C,cACA,4BACID,UAAU,wBACVE,GAAG,yBACHC,SAAUJ,EAAMK,oBAEhB,4BAAQC,UAAQ,GAAhB,mBACA,4BAAQC,MAAM,SAAd,cACA,4BAAQA,MAAM,QAAd,eAGR,yBAAKN,UAAU,YACX,2BACIO,YAAY,mBACZC,KAAK,OACLR,UAAU,eACVE,GAAG,SACHO,KAAK,SACLH,MAAOP,EAAMW,OACbP,SAAUJ,EAAMY,qBAGxB,yBAAKX,UAAU,YACX,4BACIQ,KAAK,SACLR,UAAU,uBACVY,QAASb,EAAMc,oBAHnB,c,iBC7BL,EACH,WACJ,OAAOC,IAAMC,IAAI,2CCgEVC,MAlEf,SAAoBjB,GAEhB,OACI,2BAAOC,UAAU,uBACb,2BAAOA,UAAU,cACb,4BACI,qCACA,wBAAIiB,MAAM,OACN,uBACIC,MAAO,CAACC,MAAO,SACfP,QAASb,EAAMqB,mBACfC,KAAK,IACLC,WAAS,SAJb,eAOJ,wBAAIL,MAAM,OACN,uBACIC,MAAO,CAACC,MAAO,SACfP,QAASb,EAAMqB,mBACfC,KAAK,IACLC,WAAS,QAJb,cAQJ,wBAAIL,MAAM,OACN,uBACIC,MAAO,CAACC,MAAO,SACfP,QAASb,EAAMqB,mBACfC,KAAK,IACLC,WAAS,SAJb,UAOJ,wBAAIL,MAAM,OACN,uBACIC,MAAO,CAACC,MAAO,SACfP,QAASb,EAAMqB,mBACfC,KAAK,IACLC,WAAS,SAJb,UAOJ,wBAAIL,MAAM,OACN,uBACIC,MAAO,CAACC,MAAO,SACfP,QAASb,EAAMqB,mBACfC,KAAK,IACLC,WAAS,YAJb,UASZ,+BACKvB,EAAMwB,QAAQC,KAAI,SAAAC,GAAM,OACrB,4BACI,wBAAIR,MAAM,OAAM,yBAAKS,IAAKD,EAAOhB,KAAKkB,MAAQ,IAAMF,EAAOhB,KAAKmB,KAAM5B,UAAU,YAAY6B,IAAKJ,EAAOK,QAAQC,UAChH,4BAAKN,EAAOhB,KAAKkB,OACjB,4BAAKF,EAAOhB,KAAKmB,MACjB,4BAAKH,EAAOO,OACZ,4BAAKP,EAAOQ,OACZ,4BAAKR,EAAOS,IAAIC,KAAKC,MAAM,EAAE,YC2CtCC,E,4MAhGXC,MAAQ,CACJC,OAAQ,GACR7B,OAAQ,GACRa,QAAS,I,EAQbiB,eAAiB,WACbC,IACKC,MAAK,SAAAC,GACF,IAEMC,EAFUD,EAAIE,KAAKtB,QAEGuB,QAAQ,SAAArB,GAChC,OAA2B,OAApBA,EAAOvB,GAAGI,SAErB,EAAKyC,SAAS,CAACxB,QAASqB,OAE3BI,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAGlC7C,mBAAqB,SAAAgD,GACjB,IAAM9C,EAAQ8C,EAAMC,OAAO/C,MAC3B,EAAKyC,SAAS,CACVR,OAAQjC,K,EAGhBK,kBAAoB,SAAA2C,GAAM,IAAD,EACGA,EAAED,OAAlB5C,EADa,EACbA,KAAMH,EADO,EACPA,MACd,EAAKyC,SAAL,eACKtC,EAAOH,K,EAIhBO,mBAAqB,SAAAyC,GACjBA,EAAEC,iBACU,EAAKjB,MAAMC,OACV,EAAKD,MAAM5B,OACP,YAAO,EAAK4B,MAAMf,SAEnC2B,QAAQC,IAAI,MACZ,EAAKJ,SAAU,CACXrC,OAAQ,GACRa,QAAS,M,EAIjBiC,QAAU,SAACC,GACP,IAAMC,EAAc,EAAKpB,MAAMf,QAC/BmC,EAAYC,MAAK,SAACC,EAAEC,GAChB,GAAW,UAARJ,GAA2B,SAARA,EAClB,OAASG,EAAEnD,KAAKgD,GAAOI,EAAEpD,KAAKgD,GAAQ,GAAK,EACxC,GAAU,QAAPA,EAAc,CACpB,IAAMK,EAAMF,EAAE1B,IAAIC,KAAKC,MAAM,EAAG,GAC1B2B,EAAMF,EAAE3B,IAAIC,KAAKC,MAAM,EAAG,GAC1B4B,EAAMJ,EAAE1B,IAAIC,KAAKC,MAAM,EAAG,GAC1B6B,EAAMJ,EAAE3B,IAAIC,KAAKC,MAAM,EAAG,GAC1B8B,EAAMN,EAAE1B,IAAIC,KAAKC,MAAM,EAAG,GAC1B+B,EAAMN,EAAE3B,IAAIC,KAAKC,MAAM,EAAG,GAChC,OAAS0B,EAAMC,GAAaD,IAAQC,IAASC,EAAMC,GAAaD,IAAQC,GAASC,EAAMC,GAAjE,GAA2F,EAEjH,OAAQP,EAAIC,EAAI,GAAK,KAG7B,EAAKd,SAAS,CACVxB,QAASmC,K,EAIjBtC,mBAAqB,SAACgC,GAClB,IAAMK,EAAML,EAAMC,OAAOe,aAAa,YACtC,EAAKZ,QAAQC,I,kEAlEbY,KAAK7B,mB,+BAsEL,OACI,6BACI,kBAAC,EAAD,CACI9B,OAAQ2D,KAAK/B,MAAM5B,OACnBC,kBAAmB0D,KAAK1D,kBACxB2D,iBAAkBD,KAAKxD,mBACvBT,mBAAoBiE,KAAKjE,qBAE7B,kBAAC,EAAD,CACImB,QAAS8C,KAAK/B,MAAMf,QACpBH,mBAAoBiD,KAAKjD,0B,GAzFTmD,a,MCErBC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.a70fdfd5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SearchForm(props) {\n    return (\n        <form>\n            <div className=\"form-row\">\n                <div className=\"col-auto\"> </div>\n                <div className=\"col-auto\">\n                    <label className=\"mr-sm-2 sr-only\" htmlFor=\"inlineFormCustomSelect\">Preference</label>\n                    <select \n                        className=\"custom-select mr-sm-2\" \n                        id=\"inlineFormCustomSelect\"\n                        onChange={props.handleSelectChange}\n                    >\n                        <option selected>Choose a column</option>\n                        <option value=\"first\">First Name</option>\n                        <option value=\"last\">Last Name</option>\n                    </select>\n                </div>\n                <div className=\"col-auto\">\n                    <input \n                        placeholder=\"Last Name Filter\"\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"search\"\n                        name=\"search\"\n                        value={props.search}\n                        onChange={props.handleInputChange}\n                    />\n                </div>\n                <div className=\"col-auto\">\n                    <button \n                        type=\"submit\"\n                        className=\"btn btn-primary mb-2\"\n                        onClick={props.handleFilterSubmit}\n                    >Filter</button>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default SearchForm;","import axios from \"axios\";\n\nexport default {\n    search: function() {\n        return axios.get('https://randomuser.me/api/?results=100');\n    }\n};","import React from \"react\";\n\nfunction ResultList(props) {\n    \n    return (\n        <table className=\"table table-striped\">\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th>Image</th>\n                    <th scope=\"col\">\n                        <a \n                            style={{color: \"white\"}} \n                            onClick={props.handleColHeadClick} \n                            href=\"#\"\n                            data-col=\"first\"\n                        >First Name</a>\n                    </th>\n                    <th scope=\"col\">\n                        <a \n                            style={{color: \"white\"}} \n                            onClick={props.handleColHeadClick} \n                            href=\"#\"\n                            data-col=\"last\"\n                        >Last Name</a>\n                    </th>\n\n                    <th scope=\"col\">\n                        <a \n                            style={{color: \"white\"}} \n                            onClick={props.handleColHeadClick} \n                            href=\"#\"\n                            data-col=\"phone\"\n                        >Phone</a>\n                    </th>\n                    <th scope=\"col\">\n                        <a \n                            style={{color: \"white\"}} \n                            onClick={props.handleColHeadClick} \n                            href=\"#\"\n                            data-col=\"email\"\n                        >Email</a>\n                    </th>\n                    <th scope=\"col\">\n                        <a \n                            style={{color: \"white\"}} \n                            onClick={props.handleColHeadClick} \n                            href=\"#\"\n                            data-col=\"dob.date\"\n                        >DOB</a>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.results.map(result => (\n                    <tr>\n                        <th scope=\"row\"><img alt={result.name.first + \" \" + result.name.last} className=\"img-fluid\" src={result.picture.medium} /></th>\n                        <td>{result.name.first}</td>\n                        <td>{result.name.last}</td>\n                        <td>{result.phone}</td>\n                        <td>{result.email}</td>\n                        <td>{result.dob.date.slice(0,10)}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>        \n    )\n}\n\nexport default ResultList;","// dependencies\nimport React, { Component } from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport API from \"../utils/API\";\nimport ResultList from \"./ResultList\";\n\nclass SearchResultContainer extends Component {\n    state = {\n        column: \"\",\n        search: \"\",\n        results: [],\n    };\n\n    // use componentDidMount to initialize the this.state.results\n    componentDidMount() {\n        this.searchEmployee();\n    }\n\n    searchEmployee = () => {\n        API.search()\n            .then(res => {\n                const results = res.data.results;\n                // remove the items which id equals null\n                const cleanResult = results.filter( result => {\n                    return result.id.value !== null;\n                });\n                this.setState({results: cleanResult});\n            })\n            .catch(err => console.log(err));\n    }\n\n    handleSelectChange = event => {\n        const value = event.target.value;\n        this.setState({\n            column: value\n        });\n    }\n    handleInputChange = e => {\n        const { name, value } = e.target;\n        this.setState( {\n            [name]: value\n        });\n    };\n\n    handleFilterSubmit = e => {\n        e.preventDefault();\n        const col = this.state.column;\n        const text = this.state.search;\n        const resultsCopy = [...this.state.results];\n        // const filteredResults = resultsCopy.filter( result => result.name[col].indexOf(text) >= 0);\n        console.log(\"52\")\n        this.setState( {\n            search: \"\",\n            results: []\n        })\n    }\n\n    sortCol = (col ) => {\n        const resultsCopy = this.state.results;\n        resultsCopy.sort((a,b) => {\n            if(col === \"first\" || col === \"last\") {\n                return ((a.name[col] > b.name[col]) ? 1 : -1)\n            } else if(col ===\"dob\") {\n                const aYr = a.dob.date.slice(0, 4);\n                const bYr = b.dob.date.slice(0, 4);\n                const aMn = a.dob.date.slice(0, 4);\n                const bMn = b.dob.date.slice(0, 4);\n                const aDt = a.dob.date.slice(0, 4);\n                const bDt = b.dob.date.slice(0, 4);\n                return  (aYr > bYr) ? 1 : ((aYr === bYr) ? ((aMn > bMn) ? 1 : ((aMn === bMn) ? ((aDt > bDt) ? 1 : -1) : -1))  : -1)\n            } else {\n                return (a > b ? 1 : -1)\n            }\n        });\n        this.setState({\n            results: resultsCopy\n        });\n    }\n\n    handleColHeadClick = (event) => {\n        const col = event.target.getAttribute(\"data-col\");\n        this.sortCol(col)\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchForm \n                    search={this.state.search}\n                    handleInputChange={this.handleInputChange}\n                    handleFormSubmit={this.handleFilterSubmit}\n                    handleSelectChange={this.handleSelectChange}\n                />\n                <ResultList \n                    results={this.state.results}\n                    handleColHeadClick={this.handleColHeadClick}\n                />\n            </div>\n\n        )\n    }\n}\n\nexport default SearchResultContainer;","import React from 'react';\nimport SearchResultContainer from \"./components/SearchResultContainer\"\nimport './App.css';\n\nfunction App() {\n  return <SearchResultContainer/>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}